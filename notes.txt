To do, issues to resolve, notes, and questions.


-Regions: note -- some states are in multiple regions. Option: change region in data to list of state abbreviations?
    -California
    -Florida
    -Hawaii 
    -Alaska
    -Great Lakes Region: Minnesota, Wisconsin, Ohio, Michigan, Pennsylvania, New York
    -Maritime Northwest Region: Washington, Oregon, Northern California (Include CA?)
    -Mid-Atlantic Region: North Carolina, Virginia, West Virginia, Maryland, Delaware, New Jersey, Pennsylvania, DC
    -Mid-West Region: Iowa, Missouri, Illinois, Indiana
    -Northeast Region: ME, VT, MA, NH, RI, CT and New York (also Quebec, New Brunswick, Nova Scotia Canada)
    -Northern Plains Region: North Dakota, South Dakota, Montana, Wyoming, Nebraska, Western Minnesota-
    -Southeast Region: Alabama, Georgia, Kentucky, Louisiana, Mississippi, South Carolina, Tennessee
    -

-Current To-dos:
    -dynamic routes in app.jsx
    -draw regions map function (app.js) with test data
    -look into google charts error: google not defined
    -look into s3 database for image storage
    -get images
    -add alaskan and hawaiian plants to file, reseed db
    -request to get regional data from server.py based on map click event (inside map);
    send data to Plant Container (useState to change)
        -later: filter results

-Questions:
    -do I do clicks and data fetching within the map component?
        -clicks YES: chartEvents, then call PlantContainer with regional plants
    -is DC a state in charts?


ALASKA PLANTS:
-chamerion latifolium
-trifolium incarnatum (crimson clover): Great for most bees if allowed to flower before grazing or cutting for hay. Good cover crop.
-trifolium repens (white clover):
-trifolium pratense (red clover): Great for bumble bees.
-trifolium hybridum (alsike clover): "Brown clover". 
-lacy phacilia


-GOOGLE CHARTS:
    -to make it work in react:
    -easiest: use html and jinja if needed
    -can possibly change it later and move to app.jsx
    x script tags, key, secrets.sh, global variable
    x draw regions map function
    -is DC a state in charts? check docs
    x set regions location: [string, required] "a state in the US e.g. 'US-AL' for Alabama. Note that the 
    resolution option must be set to either 'provinces' or 'metros'."
    -regions color: [number, optional] set with colorAxis.colors property.
        -check if possible in regions (not countries) mode
    -get request of appropriate regional plants data, load page of plants
        regionClick -- "called when a region is clicked. an object with a single
        property (region) that is a string in ISO-3166 format describing the region clicked."
    -get bee data per state; use this to color states in map (red-green == more threatened-less threatened)
    -later: possibility to add Canada and MX -- have data, check if possible with map region



-Flow:
    -click on map (state)
    -translate state to region (if state in region)
    -load plant data for region -- photo 'cards' and name (not all data about every plant)
    -click photo/card of plant
    -load individual plant data (think: flip the notecard over to show data)


-IMAGES: amazons3 bucket: save images connected to data, extension
    -rather than hard coding them into this file

-BEE DATA: use to color code map (geocharts)
    -overlay effect? click option on bottom to toggle between choosing region and bee data
    -look at google charts overlaying charts docs
    -ideas: toggle between number of native bees in each state, and number of threatened bees in each state
        -color 

-Get plant data from database:
    -create MORE functions in crud.py to query the database 
    -create routes in server.py to give a JSON object of the data
        using crud.py functions
    -call that from app.jsx file
    -send plant id to front end as unique react key
    -use state to update a plant component in app.jsx
        -variable to save it to (plantData)
        -function to set the state data (setPlantData)

-Database & APIs:
    x add image_url column to Plants table
    -add pollinators column if data available (add querying by pollinators)
    -get images -- USDA NRCS Plants Database, static/img/plant/<plant_id>
    x add google maps api -- done, see main.html script tag and secrets.sh for key
        -note: run source secrets.sh each time you open to make key available
    -ADD MAP: google map REGION GEOCHART -- clickable regions, map on homepage
        -within region page, options to filter by features: name, color, bloom time, etc
    -add search for native plant nurseries using google map api & zip code or address

-CRUD.PY:
    -for searching by common/scientific name: only by name AND region,
    or combine common plants and list multiple regions?
    -or keep it simple by only doing regional plants

-Routes for each region within the region route
    -Select plants from region for plantContainer to render



REACT useEffect:
    React.useEffect(() => {
        fetch('/api/plants')                        // api route to fetch data from
        .then((response) => response.json())        // take response, convert it into json
        .then((data) => setPlantData(data))         // set response to data, pass in to function
    }, [])                                          



USER STUFF (implement later?)
CRUD.PY
def create_user(fname, email, password, zipcode):
    """Create a new user and add to database."""

    user = User(fname=fname, email=email, password=password, zipcode=zipcode)

    db.session.add(user)
    db.session.commit()

    return user

MODEL.PY
class User(db.Model):
    """A user."""

    __tablename__ = 'users'

    user_id = db.Column(db.Integer, autoincrement=True, primary_key=True)
    fname = db.Column(db.String)
    email = db.Column(db.String, unique=True)
    password = db.Column(db.String)
    zipcode = db.Column(db.Integer) #foreign key
    #favorite_plants = db.Column(db.String)


    def __repr__(self):
        return f'<User user_id={self.user_id} email={self.email}>'
